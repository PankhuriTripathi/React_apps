{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\saumy\\\\Desktop\\\\New folder\\\\React_apps\\\\quiz_app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\saumy\\\\Desktop\\\\New folder\\\\React_apps\\\\quiz_app\\\\src\\\\App.jsx\";\nimport React, { useState } from 'react';\nexport default function App() {\n  var _this = this;\n\n  // Define a state variable here to track question status\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentIndex = _useState2[0],\n      setCurrentIndex = _useState2[1];\n\n  var questions = [{\n    questionText: 'What is the capital of France?',\n    answerOptions: [{\n      answerText: 'New York',\n      isCorrect: false\n    }, {\n      answerText: 'London',\n      isCorrect: false\n    }, {\n      answerText: 'Paris',\n      isCorrect: true\n    }, {\n      answerText: 'Dublin',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n\n  function handleAnswerClick(isCorrect) {\n    // Check if correct answer is pressed. (See the hint on the left)\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    if (currentIndex === questions.length - 1) {\n      // quiz over\n      setQuizFinished(true);\n    } else {\n      setCurrentIndex(function (value) {\n        return value + 1;\n      });\n    }\n  }\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      quizFinished = _useState4[0],\n      setQuizFinished = _useState4[1]; // Create a state variable here [score, setScore]\n\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 3\n    }\n  }, quizFinished ?\n  /*#__PURE__*/\n\n  /* Change this hardcoded 1 to state variable score else */\n  React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, \"You scored \", score, \" out of \", questions.length) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 8\n    }\n  }, \"Question \", currentIndex + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, questions[currentIndex].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }, questions[currentIndex].answerOptions.map(function (answer) {\n    // Add onClick listener to this button\n    return /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        handleAnswerClick(answer.isCorrect);\n      },\n      key: answer.answerText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, answer.answerText);\n  }))));\n}","map":{"version":3,"sources":["C:/Users/saumy/Desktop/New folder/React_apps/quiz_app/src/App.jsx"],"names":["React","useState","App","currentIndex","setCurrentIndex","questions","questionText","answerOptions","answerText","isCorrect","handleAnswerClick","setScore","score","length","setQuizFinished","value","quizFinished","map","answer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function App() {\r\n\t// Define a state variable here to track question status\r\n\tconst [currentIndex, setCurrentIndex] = useState(0)\r\n\r\n\tconst questions = [\r\n\t\t{\r\n\t\t\tquestionText: 'What is the capital of France?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'New York', isCorrect: false },\r\n\t\t\t\t{ answerText: 'London', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Paris', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Dublin', isCorrect: false }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'Who is CEO of Tesla?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'Jeff Bezos', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Elon Musk', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Bill Gates', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Tony Stark', isCorrect: false }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'The iPhone was created by which company?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: 'Apple', isCorrect: true },\r\n\t\t\t\t{ answerText: 'Intel', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\r\n\t\t\t\t{ answerText: 'Microsoft', isCorrect: false }\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tquestionText: 'How many Harry Potter books are there?',\r\n\t\t\tanswerOptions: [\r\n\t\t\t\t{ answerText: '1', isCorrect: false },\r\n\t\t\t\t{ answerText: '4', isCorrect: false },\r\n\t\t\t\t{ answerText: '6', isCorrect: false },\r\n\t\t\t\t{ answerText: '7', isCorrect: true }\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n\r\n\tfunction handleAnswerClick(isCorrect) {\r\n\t\t// Check if correct answer is pressed. (See the hint on the left)\r\n        if(isCorrect)\r\n        {\r\n            setScore(score+1)\r\n        }\r\n\r\n\t\tif (currentIndex === questions.length - 1) {\r\n\t\t\t// quiz over\r\n\t\t\tsetQuizFinished(true)\r\n\t\t} else {\r\n\t\t\tsetCurrentIndex((value) => value + 1)\r\n\t\t}\r\n\t}\r\n\r\n\tconst [quizFinished, setQuizFinished] = useState(false)\r\n\r\n\t// Create a state variable here [score, setScore]\r\n    const [score, setScore] = useState(0)\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t{quizFinished ? (\r\n\t\t\t\t/* Change this hardcoded 1 to state variable score else */\r\n\t\t\t\t<div className=\"score-section\">You scored {score} out of {questions.length}</div>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<div className=\"question-section\">\r\n\t\t\t\t\t\t<div className=\"question-count\">\r\n\t\t\t\t\t\t\t<span>Question {currentIndex+1}</span>/{questions.length}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"question-text\">{questions[currentIndex].questionText}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"answer-section\">\r\n\t\t\t\t\t\t{questions[currentIndex].answerOptions.map((answer) => {\r\n\t\t\t\t\t\t\t// Add onClick listener to this button\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<button onClick={() =>{\r\n                                    handleAnswerClick(answer.isCorrect)\r\n                                } }key={answer.answerText}>\r\n\t\t\t\t\t\t\t\t\t{answer.answerText}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}